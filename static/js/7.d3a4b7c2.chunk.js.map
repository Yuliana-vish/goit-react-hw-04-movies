{"version":3,"sources":["components/Cast/CastItem.jsx","components/Cast/index.jsx"],"names":["CastItem","name","path","character","imgURL","className","src","alt","width","Cast","state","casts","error","movieId","this","props","match","params","apiServices","fetchCast","then","cast","setState","catch","isLoading","type","color","height","length","map","profile_path","cast_id","message","Component"],"mappings":"kNAsBeA,EAlBE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAEtBC,EADU,kCACSF,EAEzB,OACI,qBAAIG,UAAU,qBAAd,UACI,qBAAKC,IAAKF,EAAQG,IAAKN,EAAMI,UAAU,oBAAoBG,MAAM,QACjE,6BAAKP,IACL,4CAAeE,S,iBCLrBM,E,4MACFC,MAAQ,CACJC,MAAO,GACPC,MAAO,M,uDAGX,WAAqB,IAAD,OACRC,EAAYC,KAAKC,MAAMC,MAAMC,OAA7BJ,QACRK,IACKC,UAAUN,GACVO,MAAK,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAAEX,MAAOU,OACpCE,OAAM,SAAAX,GAAK,OAAI,EAAKU,SAASV,Q,oBAGtC,WAAU,IAAD,EAC+BE,KAAKJ,MAAjCC,EADH,EACGA,MAAOC,EADV,EACUA,MAAOY,EADjB,EACiBA,UAEtB,OACI,qCACI,oBAAInB,UAAU,eAAd,SACCmB,EACG,qBAAKnB,UAAU,SAAf,SACI,cAAC,IAAD,CAAQoB,KAAK,QAAQC,MAAM,UAAUC,OAAQ,IAAKnB,MAAO,QAE7DG,EAAMiB,OAAS,EACfjB,EAAMkB,KAAI,YAAiD,IAA9C5B,EAA6C,EAA7CA,KAAM6B,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,QAAS5B,EAAgB,EAAhBA,UACtC,OACI,cAAC,EAAD,CAEIF,KAAMA,EACNC,KAAM4B,EACN3B,UAAWA,GAHN4B,MAQT,6CAGPnB,GAAS,oBAAIP,UAAU,eAAd,SAA8BO,EAAMoB,iB,GAvC/CC,aAkDJxB","file":"static/js/7.d3a4b7c2.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport '../../App.css';\r\n\r\n\r\nconst CastItem = ({ name, path, character }) => {\r\n    const baseURL = 'https://image.tmdb.org/t/p/w300';\r\n    const imgURL = baseURL + path;\r\n\r\n    return (\r\n        <li className=\"cast-gallery__item\">\r\n            <img src={imgURL} alt={name} className=\"cast-gallery__img\" width=\"150\" />\r\n            <h3>{name}</h3>\r\n            <p>Character: {character}</p>\r\n        </li>\r\n    );\r\n};\r\n\r\nCastItem.propTypes = {\r\n    path: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    character: PropTypes.string.isRequired,\r\n};\r\nexport default CastItem;","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport apiServices from '../../api'; \r\nimport CastItem from './CastItem';\r\nimport Loader from 'react-loader-spinner';\r\nimport '../../App.css';\r\n\r\nclass Cast extends Component {\r\n    state = {\r\n        casts: [],\r\n        error: null,      \r\n    };\r\n\r\n    componentDidMount() {\r\n        const { movieId } = this.props.match.params;\r\n        apiServices\r\n            .fetchCast(movieId)\r\n            .then(cast => this.setState({ casts: cast }))\r\n            .catch(error => this.setState(error))\r\n          \r\n    }\r\n    render() {\r\n        const { casts, error, isLoading } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <ul className=\"cast-gallery\">\r\n                {isLoading ? (\r\n                    <div className=\"Loader\">\r\n                        <Loader type=\"Rings\" color=\"#00BFFF\" height={200} width={200} />\r\n                    </div>\r\n                ) : casts.length > 0 ? (\r\n                    casts.map(({ name, profile_path, cast_id, character }) => {\r\n                        return (\r\n                            <CastItem\r\n                                key={cast_id}\r\n                                name={name}\r\n                                path={profile_path}\r\n                                character={character}\r\n                            />\r\n                        );\r\n                    })\r\n                ) : (\r\n                            <span>No cast</span>\r\n                            )}\r\n                    </ul>\r\n                    {error && <h3 className=\"ErrorMessage\">{error.message}</h3>}\r\n                    \r\n            </>\r\n        );\r\n    }\r\n}  \r\n\r\nCast.propTypes = {\r\n    movieId: PropTypes.string,\r\n};\r\n\r\nexport default Cast;"],"sourceRoot":""}