{"version":3,"sources":["components/Reviews/ReviewsItem.jsx","components/Reviews/index.jsx"],"names":["ReviewsItem","author","content","Reviews","state","reviews","error","movieId","this","props","match","params","apiServices","fetchReviews","then","results","setState","catch","isLoading","className","type","color","height","width","length","map","id","message","Component"],"mappings":"mOAceA,EAXK,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OAChB,+BACI,0CAAaD,KACb,4BAAIC,QCANC,E,4MACJC,MAAQ,CACNC,QAAS,GACTC,MAAO,M,uDAGT,WAAqB,IAAD,OACVC,EAAYC,KAAKC,MAAMC,MAAMC,OAA7BJ,QACRK,IACGC,aAAaN,GACbO,MAAK,SAAAC,GAAO,OAAI,EAAKC,SAAS,CAAEX,QAASU,OACzCE,OAAM,SAAAX,GAAK,OAAI,EAAKU,SAASV,Q,oBAGlC,WAAU,IAAD,EAC+BE,KAAKJ,MAAnCC,EADD,EACCA,QAASC,EADV,EACUA,MAAOY,EADjB,EACiBA,UAExB,OACE,qCACE,6BACGA,EACD,qBAAKC,UAAU,SAAf,SACA,cAAC,IAAD,CAAQC,KAAK,QAAQC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,QAErDlB,EAAQmB,OAAS,EACnBnB,EAAQoB,KAAI,gBAAGC,EAAH,EAAGA,GAAIzB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,cAAC,EAAD,CAAsBD,OAAQA,EAAQC,QAASA,GAA7BwB,MAGtB,gDAICpB,GAAS,oBAAIa,UAAU,eAAd,SAA8Bb,EAAMqB,iB,GAjClCC,aA2CPzB","file":"static/js/8.958b2f0b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport '../../App.css';\r\n\r\nconst ReviewsItem = ({ author, content }) => (\r\n    <li>\r\n        <h5>Author: {author}</h5>\r\n        <p>{content}</p>\r\n    </li>\r\n);\r\n\r\nReviewsItem.propTypes = {\r\n    author: PropTypes.string.isRequired,\r\n    content: PropTypes.string.isRequired,\r\n};\r\nexport default ReviewsItem;","import{ Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport apiServices from '../../api'; \r\nimport Loader from 'react-loader-spinner';\r\nimport ReviewsItem from './ReviewsItem';\r\n\r\nclass Reviews extends Component {\r\n  state = {\r\n    reviews: [],\r\n    error: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { movieId } = this.props.match.params;\r\n    apiServices\r\n      .fetchReviews(movieId)\r\n      .then(results => this.setState({ reviews: results }))\r\n      .catch(error => this.setState(error))\r\n      \r\n  }\r\n  render() {\r\n    const { reviews, error, isLoading } = this.state;\r\n\r\n    return (\r\n      <>       \r\n        <ul>\r\n          {isLoading ? (\r\n          <div className=\"Loader\">\r\n          <Loader type=\"Rings\" color=\"#00BFFF\" height={200} width={200} />\r\n          </div>\r\n          ) : reviews.length > 0 ? (\r\n            reviews.map(({ id, author, content }) => (\r\n              <ReviewsItem key={id} author={author} content={content} />\r\n            ))\r\n          ) : (\r\n          <span>No reviews</span>\r\n          )}\r\n               \r\n        </ul>\r\n          {error && <h3 className=\"ErrorMessage\">{error.message}</h3>}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nReviews.propTypes = {\r\n    movieId: PropTypes.string,\r\n};\r\n\r\nexport default Reviews;\r\n\r\n\r\n"],"sourceRoot":""}